* Software Development
** 4/4/16 - Aim: Feel the Bind, Part Deux
A python function has an inner function, does this constitute a closure?
Nah
*** Closures:
**** A function is declared inside another function
**** Inner Function access a variable from the outer funtion (outside of the local scope of the inner function
**** The external function binds a value to the variable and finishes (or closes) befire the inner function can be completed
#+BEGIN_SRC python
  def repeat(s):
      def times(x):
          return s * x
      return times
r1 = repeat("hello")
#+END_SRC
**** This creates a closure because repeat runs,binds s to "hello", and then exits, returning a functions (times) with s bound to "hello"

** 4/5/16 - Decoration Day
In a new .py file, define the following functions
predict output of flist[1](5) before running
#+BEGIN_SRC python :session
  def inc(x):
      return x + 1
  def dec(x):
      return x - 1

  f = inc

  #return f(5) 

  flist = [inc, dec]

  #return flist[1](5)
  def makeAdder(n):
      def inner(x):
          return x + n
      return inner

  add3 = makeAdder(3)
  add5 = makeAdder(5)

  add3(10)
  add5(10)
   '''
     def make_count():
         # private "instance" data
         # python scoping rules necessitate list
         count = [0]
         #public methods
         def inc():
         return count[0] = count[0] + 1
         def dec():
         count[0] = count[0] - 1
         def reset():
         count[0] = 0
         def get():
         return count[0]

         #return dictionary to allow access to all methods
         return{'inc': inc, 'dec': dec, 'reset':reset, 'get': get }

   c1 = make_count()
   c1['inc']()
   c1['inc']()
   c1['inc']()
   c1['get']()

   c2 = make_count()
   c2['inc']()
   c2['get']()

   c1['reset']()
   c1['get']()
   '''
#+END_SRC
A python Decorator (@) is shorthand for calling a a wrapper-type function like doubler

A Python Decorator encapsulates a closure

A Python decorator allows you to transparently wrap functionality
** 4/6/16 - Anarchy??? 
*** Quicksort:
1. Select a pivot
2. Partition
   All values less than pivot, upper half; 
   All lower, lower half;
   Pivot is in final resting po
3. qsort
** 4/13/16 - "Memorization"[:4] + "Memorization"[5:] 
fib(5) -> fib(3) + fib(4) -> (fib(1) + fib(2)) + (fib(3) + fib(2)) -> ...
Dynamic Programming:
meaks of solving a complex problem by solving its component subproblems just once
and storing their solutions

Memoization:
Technique of storing solutions to subproblems to avoid recomputation

or

Use of caches to trerieve previously computed values to reduce time
complexity of algorithms
** 4/13/16 
